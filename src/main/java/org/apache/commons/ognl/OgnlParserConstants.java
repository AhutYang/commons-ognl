/*
 * $Id$
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* Generated By:JJTree&JavaCC: Do not edit this line. OgnlParserConstants.java */
package org.apache.commons.ognl;

/**
 * Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface OgnlParserConstants
{

    /** End of File. */
    int EOF = 0;

    /** RegularExpression Id. */
    int IDENT = 64;

    /** RegularExpression Id. */
    int LETTER = 65;

    /** RegularExpression Id. */
    int DIGIT = 66;

    /** RegularExpression Id. */
    int DYNAMIC_SUBSCRIPT = 67;

    /** RegularExpression Id. */
    int ESC = 71;

    /** RegularExpression Id. */
    int CHAR_LITERAL = 73;

    /** RegularExpression Id. */
    int BACK_CHAR_ESC = 74;

    /** RegularExpression Id. */
    int BACK_CHAR_LITERAL = 76;

    /** RegularExpression Id. */
    int STRING_ESC = 77;

    /** RegularExpression Id. */
    int STRING_LITERAL = 79;

    /** RegularExpression Id. */
    int INT_LITERAL = 80;

    /** RegularExpression Id. */
    int FLT_LITERAL = 81;

    /** RegularExpression Id. */
    int DEC_FLT = 82;

    /** RegularExpression Id. */
    int DEC_DIGITS = 83;

    /** RegularExpression Id. */
    int EXPONENT = 84;

    /** RegularExpression Id. */
    int FLT_SUFF = 85;

    /** Lexical state. */
    int DEFAULT = 0;

    /** Lexical state. */
    int WithinCharLiteral = 1;

    /** Lexical state. */
    int WithinBackCharLiteral = 2;

    /** Lexical state. */
    int WithinStringLiteral = 3;

    /** Literal token values. */
    String[] tokenImage = { "<EOF>", "\",\"", "\"=\"", "\"?\"", "\":\"", "\"||\"", "\"or\"", "\"&&\"", "\"and\"",
        "\"|\"", "\"bor\"", "\"^\"", "\"xor\"", "\"&\"", "\"band\"", "\"==\"", "\"eq\"", "\"!=\"", "\"neq\"", "\"<\"",
        "\"lt\"", "\">\"", "\"gt\"", "\"<=\"", "\"lte\"", "\">=\"", "\"gte\"", "\"in\"", "\"not\"", "\"<<\"",
        "\"shl\"", "\">>\"", "\"shr\"", "\">>>\"", "\"ushr\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"", "\"%\"", "\"~\"",
        "\"!\"", "\"instanceof\"", "\".\"", "\"(\"", "\")\"", "\"true\"", "\"false\"", "\"null\"", "\"#this\"",
        "\"#root\"", "\"#\"", "\"[\"", "\"]\"", "\"{\"", "\"}\"", "\"@\"", "\"new\"", "\"$\"", "\" \"", "\"\\t\"",
        "\"\\f\"", "\"\\r\"", "\"\\n\"", "<IDENT>", "<LETTER>", "<DIGIT>", "<DYNAMIC_SUBSCRIPT>", "\"`\"", "\"\\\'\"",
        "\"\\\"\"", "<ESC>", "<token of kind 72>", "\"\\\'\"", "<BACK_CHAR_ESC>", "<token of kind 75>", "\"`\"",
        "<STRING_ESC>", "<token of kind 78>", "\"\\\"\"", "<INT_LITERAL>", "<FLT_LITERAL>", "<DEC_FLT>",
        "<DEC_DIGITS>", "<EXPONENT>", "<FLT_SUFF>", };

}
